import Dexie, { type EntityTable } from 'dexie';

//scaffolding - will of course change the Friend interface and declarations later

/*
basically will need to have two types of data: permanent data and render data
permanent data are things like a bullet and a prevJob.

render data is whatever will be rendered to the screen.
At some point, that render data can become a saved permanent resume
*/

type UserLink = {
    label: string;
    url: string;
}

type User = {
    id: string; // use crypto.randomUUID()
    fullName: string;
    email: string;
    phoneNumber: string;
    location: string;
    links: UserLink[];
}

type Bullet = {
    id: string; // uuid
    text: string;
}

type PrevJob = {
    id: string; //uuid
    companyName: string;
    jobTitle: string;
    monthStarted: number;
    yearStarted: number;
    monthEnded: number;
    yearEnded: number;
}

type PrevJobWithBullet = {
    id: string; //uuid
    prevJobId: string;
    bullets: string[];
}

const db = new Dexie('FriendsDatabase') as Dexie & {
    bullets: EntityTable<Bullet, "id"
    >;
};

// Schema declaration:
db.version(1).stores({
    bullets: 'id' // primary key "id" (for the runtime!)
});

export type { Bullet };
export { db };



/*
    BULLETS (literally just all the bullet points, no bucketing)
    array of objects
    they will have an id generated by crypto.randomUUID() and some text that the user defines
    [
        { id: 0 (will really be a crypto.randomUUID()), text: "some text" },
        { id: 1 (will really be a crypto.randomUUID()), text: "some different text" }
    ]

    PREVIOUS JOBS
    array of objects



        PREVIOUS JOBS WITH BULLETS
    [
        { id: 0, prevJobId: 0, bullets: [0, 1, 3, 6, 7], title: "For web development jobs" },
        { id: 1, prevJobId: 0, bullets: [0, 2, 4, 5, 8], title: "For full stack jobs" }
    ]


    
    resume
    how to make this programmatically render?

    [
        {
            type: 
        }
    ]

*/