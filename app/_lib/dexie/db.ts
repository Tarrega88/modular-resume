import Dexie, { type EntityTable } from 'dexie';

//scaffolding - will of course change the Friend interface and declarations later

interface Friend {
    bulletPoints: string[];
    id: number;
    name: string;
    age: number;
}

const db = new Dexie('FriendsDatabase') as Dexie & {
    friends: EntityTable<
        Friend,
        'id' // primary key "id" (for the typings only)
    >;
};

// Schema declaration:
db.version(1).stores({
    friends: '++id, name, age' // primary key "id" (for the runtime!)
});

export type { Friend };
export { db };



/*
    BULLETS (literally just all the bullet points, no bucketing)
    array of objects
    they will have an id generated by crypto.randomUUID() and some text that the user defines
    [
        { id: 0 (will really be a crypto.randomUUID()), text: "some text" },
        { id: 1 (will really be a crypto.randomUUID()), text: "some different text" }
    ]

    PREVIOUS JOBS
    array of objects
    
    [
        { id: 0(crypto.randomUUID()), companyName: "ABC Inc.", jobTitle: "Software Developer" monthStarted: 2, yearStarted: 2020, monthEnded: 3, yearEnded: 2022 }
    ]


        PREVIOUS JOBS WITH BULLETS
    [
        { id: 0, prevJobId: 0, bullets: [0, 1, 3, 6, 7], title: "For web development jobs" },
        { id: 1, prevJobId: 0, bullets: [0, 2, 4, 5, 8], title: "For full stack jobs" }
    ]


    
    resume
    how to make this programmatically render?

    [
        {
            type: 
        }
    ]

*/